package pack2;

import java.math.BigInteger;
import java.util.ArrayList;

public class Problem13 {
	static ArrayList<String> list = new ArrayList<String>();
	
//	37107287533902102798797998220837590246510135740250 
//	46376937677490009712648124896970078050417018260538
//	74324986199524741059474233309513058123726617309629
//	91942213363574161572522430563301811072406154908250
//	23067588207539346171171980310421047513778063246676
//	89261670696623633820136378418383684178734361726757
//	28112879812849979408065481931592621691275889832738
//	44274228917432520321923589422876796487670272189318
//	47451445736001306439091167216856844588711603153276
//	70386486105843025439939619828917593665686757934951
//	62176457141856560629502157223196586755079324193331
//	64906352462741904929101432445813822663347944758178
//	92575867718337217661963751590579239728245598838407
//	58203565325359399008402633568948830189458628227828
//	80181199384826282014278194139940567587151170094390
//	35398664372827112653829987240784473053190104293586
//	86515506006295864861532075273371959191420517255829
//	71693888707715466499115593487603532921714970056938
//	54370070576826684624621495650076471787294438377604
//	53282654108756828443191190634694037855217779295145
//	36123272525000296071075082563815656710885258350721
//	45876576172410976447339110607218265236877223636045
//	17423706905851860660448207621209813287860733969412
//	81142660418086830619328460811191061556940512689692
//	51934325451728388641918047049293215058642563049483
//	62467221648435076201727918039944693004732956340691
//	15732444386908125794514089057706229429197107928209
//	55037687525678773091862540744969844508330393682126
//	18336384825330154686196124348767681297534375946515
//	80386287592878490201521685554828717201219257766954
//	78182833757993103614740356856449095527097864797581
//	16726320100436897842553539920931837441497806860984
//	48403098129077791799088218795327364475675590848030
//	87086987551392711854517078544161852424320693150332
//	59959406895756536782107074926966537676326235447210
//	69793950679652694742597709739166693763042633987085
//	41052684708299085211399427365734116182760315001271
//	65378607361501080857009149939512557028198746004375
//	35829035317434717326932123578154982629742552737307
//	94953759765105305946966067683156574377167401875275
//	88902802571733229619176668713819931811048770190271
//	25267680276078003013678680992525463401061632866526
//	36270218540497705585629946580636237993140746255962
//	24074486908231174977792365466257246923322810917141
//	91430288197103288597806669760892938638285025333403
//	34413065578016127815921815005561868836468420090470
//	23053081172816430487623791969842487255036638784583
//	11487696932154902810424020138335124462181441773470
//	63783299490636259666498587618221225225512486764533
//	67720186971698544312419572409913959008952310058822
//	95548255300263520781532296796249481641953868218774
//	76085327132285723110424803456124867697064507995236
//	37774242535411291684276865538926205024910326572967
//	23701913275725675285653248258265463092207058596522
//	29798860272258331913126375147341994889534765745501
//	18495701454879288984856827726077713721403798879715
//	38298203783031473527721580348144513491373226651381
//	34829543829199918180278916522431027392251122869539
//	40957953066405232632538044100059654939159879593635
//	29746152185502371307642255121183693803580388584903
//	41698116222072977186158236678424689157993532961922
//	62467957194401269043877107275048102390895523597457
//	23189706772547915061505504953922979530901129967519
//	86188088225875314529584099251203829009407770775672
//	11306739708304724483816533873502340845647058077308
//	82959174767140363198008187129011875491310547126581
//	97623331044818386269515456334926366572897563400500
//	42846280183517070527831839425882145521227251250327
//	55121603546981200581762165212827652751691296897789
//	32238195734329339946437501907836945765883352399886
//	75506164965184775180738168837861091527357929701337
//	62177842752192623401942399639168044983993173312731
//	32924185707147349566916674687634660915035914677504
//	99518671430235219628894890102423325116913619626622
//	73267460800591547471830798392868535206946944540724
//	76841822524674417161514036427982273348055556214818
//	97142617910342598647204516893989422179826088076852
//	87783646182799346313767754307809363333018982642090
//	10848802521674670883215120185883543223812876952786
//	71329612474782464538636993009049310363619763878039
//	62184073572399794223406235393808339651327408011116
//	66627891981488087797941876876144230030984490851411
//	60661826293682836764744779239180335110989069790714
//	85786944089552990653640447425576083659976645795096
//	66024396409905389607120198219976047599490197230297
//	64913982680032973156037120041377903785566085089252
//	16730939319872750275468906903707539413042652315011
//	94809377245048795150954100921645863754710598436791
//	78639167021187492431995700641917969777599028300699
//	15368713711936614952811305876380278410754449733078
//	40789923115535562561142322423255033685442488917353
//	44889911501440648020369068063960672322193204149535
//	41503128880339536053299340368006977710650566631954
//	81234880673210146739058568557934581403627822703280
//	82616570773948327592232845941706525094512325230608
//	22918802058777319719839450180888072429661980811197
//	77158542502016545090413245809786882778948721859617
//	72107838435069186155435662884062257473692284509516
//	20849603980134001723930671666823555245252804609722
//	53503534226472524250874054075591789781264330331690

	public static void main(String[] args) {
		Problem13 p = new Problem13();
		list.add("37107287533902102798797998220837590246510135740250");
		list.add("46376937677490009712648124896970078050417018260538");
		list.add("74324986199524741059474233309513058123726617309629");
		list.add("91942213363574161572522430563301811072406154908250");
		list.add("23067588207539346171171980310421047513778063246676");
		list.add("89261670696623633820136378418383684178734361726757");
		list.add("28112879812849979408065481931592621691275889832738");
		list.add("44274228917432520321923589422876796487670272189318");
		list.add("47451445736001306439091167216856844588711603153276");
		list.add("70386486105843025439939619828917593665686757934951");
		list.add("62176457141856560629502157223196586755079324193331");
		list.add("64906352462741904929101432445813822663347944758178");
		list.add("92575867718337217661963751590579239728245598838407");
		list.add("58203565325359399008402633568948830189458628227828");
		list.add("80181199384826282014278194139940567587151170094390");
		list.add("35398664372827112653829987240784473053190104293586");
		list.add("86515506006295864861532075273371959191420517255829");
		list.add("71693888707715466499115593487603532921714970056938");
		list.add("54370070576826684624621495650076471787294438377604");
		list.add("53282654108756828443191190634694037855217779295145");
		list.add("36123272525000296071075082563815656710885258350721");
		list.add("45876576172410976447339110607218265236877223636045");
		list.add("17423706905851860660448207621209813287860733969412");
		list.add("81142660418086830619328460811191061556940512689692");
		list.add("51934325451728388641918047049293215058642563049483");
		list.add("62467221648435076201727918039944693004732956340691");
		list.add("15732444386908125794514089057706229429197107928209");
		list.add("55037687525678773091862540744969844508330393682126");
		list.add("18336384825330154686196124348767681297534375946515");
		list.add("80386287592878490201521685554828717201219257766954");
		list.add("78182833757993103614740356856449095527097864797581");
		list.add("16726320100436897842553539920931837441497806860984");
		list.add("48403098129077791799088218795327364475675590848030");
		list.add("87086987551392711854517078544161852424320693150332");
		list.add("59959406895756536782107074926966537676326235447210");
		list.add("69793950679652694742597709739166693763042633987085");
		list.add("41052684708299085211399427365734116182760315001271");
		list.add("65378607361501080857009149939512557028198746004375");
		list.add("35829035317434717326932123578154982629742552737307");
		list.add("94953759765105305946966067683156574377167401875275");
		list.add("88902802571733229619176668713819931811048770190271");
		list.add("25267680276078003013678680992525463401061632866526");
		list.add("36270218540497705585629946580636237993140746255962");
		list.add("24074486908231174977792365466257246923322810917141");
		list.add("91430288197103288597806669760892938638285025333403");
		list.add("34413065578016127815921815005561868836468420090470");
		list.add("23053081172816430487623791969842487255036638784583");
		list.add("11487696932154902810424020138335124462181441773470");
		list.add("63783299490636259666498587618221225225512486764533");
		list.add("67720186971698544312419572409913959008952310058822");
		list.add("95548255300263520781532296796249481641953868218774");
		list.add("76085327132285723110424803456124867697064507995236");
		list.add("37774242535411291684276865538926205024910326572967");
		list.add("23701913275725675285653248258265463092207058596522");
		list.add("29798860272258331913126375147341994889534765745501");
		list.add("18495701454879288984856827726077713721403798879715");
		list.add("38298203783031473527721580348144513491373226651381");
		list.add("34829543829199918180278916522431027392251122869539");
		list.add("40957953066405232632538044100059654939159879593635");
		list.add("29746152185502371307642255121183693803580388584903");
		list.add("41698116222072977186158236678424689157993532961922");
		list.add("62467957194401269043877107275048102390895523597457");
		list.add("23189706772547915061505504953922979530901129967519");
		list.add("86188088225875314529584099251203829009407770775672");
		list.add("11306739708304724483816533873502340845647058077308");
		list.add("82959174767140363198008187129011875491310547126581");
		list.add("97623331044818386269515456334926366572897563400500");
		list.add("42846280183517070527831839425882145521227251250327");
		list.add("55121603546981200581762165212827652751691296897789");
		list.add("32238195734329339946437501907836945765883352399886");
		list.add("75506164965184775180738168837861091527357929701337");
		list.add("62177842752192623401942399639168044983993173312731");
		list.add("32924185707147349566916674687634660915035914677504");
		list.add("99518671430235219628894890102423325116913619626622");
		list.add("73267460800591547471830798392868535206946944540724");
		list.add("76841822524674417161514036427982273348055556214818");
		list.add("97142617910342598647204516893989422179826088076852");
		list.add("87783646182799346313767754307809363333018982642090");
		list.add("10848802521674670883215120185883543223812876952786");
		list.add("71329612474782464538636993009049310363619763878039");
		list.add("62184073572399794223406235393808339651327408011116");
		list.add("66627891981488087797941876876144230030984490851411");
		list.add("60661826293682836764744779239180335110989069790714");
		list.add("85786944089552990653640447425576083659976645795096");
		list.add("66024396409905389607120198219976047599490197230297");
		list.add("64913982680032973156037120041377903785566085089252");
		list.add("16730939319872750275468906903707539413042652315011");
		list.add("94809377245048795150954100921645863754710598436791");
		list.add("78639167021187492431995700641917969777599028300699");
		list.add("15368713711936614952811305876380278410754449733078");
		list.add("40789923115535562561142322423255033685442488917353");
		list.add("44889911501440648020369068063960672322193204149535");
		list.add("41503128880339536053299340368006977710650566631954");
		list.add("81234880673210146739058568557934581403627822703280");
		list.add("82616570773948327592232845941706525094512325230608");
		list.add("22918802058777319719839450180888072429661980811197");
		list.add("77158542502016545090413245809786882778948721859617");
		list.add("72107838435069186155435662884062257473692284509516");
		list.add("20849603980134001723930671666823555245252804609722");
		list.add("53503534226472524250874054075591789781264330331690");

		
		
		p.start();
	}

	public static void start() {
		ArrayList<String> list2 = new ArrayList<>();
		int X = 100; //How many numbers of size Y are we adding
		int Y = 50; //The length of the numbers we are adding
		int Z = 10; //How many digits from the sum we want
		int last = Y - valuesSafeToIgnore(X, Y, Z) + 1;
		
		
		
		//55373762303860
		//5537376230342
		//5537376230342
		long total = 0;
		for(int i = 0; i < list.size(); i++) {
			String nbr = list.get(i);
			String newNbr = nbr.substring(0, last);
			list2.add(newNbr);
			long value = Long.parseLong(newNbr);
			total += value;
			
			System.out.println(newNbr);
		}
		System.out.println(total);
		
//		System.out.println(last);
//		System.out.println(maxLength(X, last));
//		System.out.println(valuesSafeToIgnore(X, Y, Z));
//		
//		System.out.println(maxLength(X, Y));
	
	}

	
	
	
	private static int maxLength(int X, int Y) {
	    double maxSum = 2 * X * Math.pow(10, Y) - 2 * X; // Calculate the maximum value that can be represented by the sum
	    return (int) (Math.log10(maxSum) + 1); // Calculate the length of the maximum value and return it as an integer
	}

	
	private int[] bigNum(String nbr) {
		int digits = nbr.length();
		int[] bigNum = new int[digits];
		return bigNum;
	}
	
	
	
	public static int valuesSafeToIgnore(int X, int Y, int Z) {
	    //values to ignore when calculating:
		//the first Z digits of the sum of 
		//X amount of 
		//Y-digit long numbers.
		
		int significantDigits = Y - Z; // Calculate the number of significant digits
	    int position = 0; // Initialize the position to zero
	    
	    // Find the position of the least significant digit that will affect the final result
	    while (significantDigits > 0) {
	        position++;
	        significantDigits--;
	    }
	    
	    // Calculate the number of values safe to ignore based on the position of the least significant digit
	    if (position == 0) {
	        return 0; // All values need to be taken into account
	    } else if (position == 1) {
	        return 1; // Can ignore all digits in singular positions
	    } else {
	        return position - 1; // Can ignore all digits in positions greater than 1
	    }
	}
	
}


//Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
//say its 10 four-digit numbers and we want the first 2 digits of the sum.

//Work out the first two digits of the sum of the following ten 4-digit numbers.
//7812
//4598
//6237
//1789
//9456
//3021
//5768
//8324
//2190
//6853

//37107287533902102798797998220837590246510135740250
//99999999999999999999999999999999999999999999999999
//the biggest possible nummber would be 10*9999 = 99990

