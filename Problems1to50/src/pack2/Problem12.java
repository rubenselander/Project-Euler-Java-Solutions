package pack2;

import java.util.ArrayList;


public class Problem12 {

	public Problem12() {
		long num = NumberOfDivisors.getSmallestNbr(6);
		System.out.println(num);
		
		
	}
	
	private long getTriangleNbr(long tNbr) {
		long sum = 0;
		for(int i = 0; i <= tNbr; i++) {
			sum += i;
		}
		return sum;
	}
	
	private int countFactors(long nbr) {
	    int count = 0;
	    
	    for (int i = 1; i <= Math.sqrt(nbr); i++) {
	        if (nbr % i == 0) {
	            // If nbr is a perfect square, only count it once
	            if (nbr / i == i) {
	                count++;
	            } else {
	                // Otherwise, count both divisors
	                count += 2;
	            }
	        }
	    }
	    
	    return count;
	}

	
	

	private long isPrime(long input) {
		long max = input - 1;
		long min = 2;
		for (long divider = min; divider <= max; divider++) {
			if (input % divider == 0) {
				System.out.println(input + " / " + divider + " = " + (input / divider));
				//if this is to slow try setting min to the lesser of divider and (input / divider)
				if (input / divider > divider) {
					return isPrime(input / divider);
				} else {
					return isPrime(divider);
				}
			}
		}
		//only the biggest primefactor will end up here
		return input;
	}
}


//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

//Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28

//We can see that 28 is the first triangle number to have over five divisors.

//What is the value of the first triangle number to have over five hundred divisors?



//Triangle numbers are the sum of the first n natural numbers, 
//and the nth triangle number can be expressed as T_n = n * (n + 1) / 2.


//To find the first triangle number with at least N divisors, follow these steps:

//Start with n = 1 and calculate the triangle number T_n = n * (n + 1) / 2.

//Factorize n and (n + 1) into their prime factors.
//Find the exponents of those prime factors (e_1, e_2, e_3, ...).

//Calculate the number of divisors for each factor using the formula: 
//	(e_1 + 1)(e_2 + 1)(e_3 + 1)...

//Since T_n is a product of two consecutive integers (n * (n + 1) / 2), 
//the total number of divisors of T_n is the product of the number of divisors of n and (n + 1), 
//divided by 2 (to account for the common factor of 2).

//If the total number of divisors of T_n is at least N, 
//you've found the first triangle number with at least N divisors. 
//If not, increment n by 1 and repeat steps 1 to 4.

