package pack5;

import java.util.function.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.HashSet;
import java.util.Set;

public class Problem44 {
	private static Function<Integer, Integer> function = n -> (n * (3 * n - 1)) / 2;

	public static void main(String[] args) {
		ArrayList<Integer> pentNumbers = new ArrayList<>();
		int limit = 10000;

		for (int i = 1; i <= limit; i++) {
			int value = function.apply(i);
			pentNumbers.add(value);
		}

		List<Pair> result = findPairs(pentNumbers);
        for (Pair p : result) {
            System.out.println(p.a + ", " + p.b);
            int diff = Math.abs(p.a - p.b);
            System.out.println(diff);
        }

	}

	public static List<Pair> findPairs(List<Integer> input) {
		Set<Integer> numbers = new HashSet<>(input);
		Map<Integer, List<Pair>> sumMap = new HashMap<>();
		Map<Integer, List<Pair>> diffMap = new HashMap<>();
		List<Pair> result = new ArrayList<>();

		for (int i = 0; i < input.size(); i++) {
			int a = input.get(i);
			for (int b : numbers) {
				if (a == b) {
					continue;
				}

				int sum = a + b;
				int diff = Math.abs(a - b);

				if (numbers.contains(sum) && numbers.contains(diff)) {
					Pair pair = new Pair(a, b);

					if (!sumMap.containsKey(sum)) {
						sumMap.put(sum, new ArrayList<>());
					}
					if (!diffMap.containsKey(diff)) {
						diffMap.put(diff, new ArrayList<>());
					}

					if (!sumMap.get(sum).contains(pair) && !diffMap.get(diff).contains(pair)) {
						result.add(pair);
						sumMap.get(sum).add(pair);
						diffMap.get(diff).add(pair);
					}
				}
			}
		}
		return result;
	}

	static class Pair {
		int a;
		int b;

		public Pair(int a, int b) {
			this.a = a;
			this.b = b;
		}

		@Override
		public boolean equals(Object o) {
			if (this == o)
				return true;
			if (o == null || getClass() != o.getClass())
				return false;
			Pair pair = (Pair) o;
			return (a == pair.a && b == pair.b) || (a == pair.b && b == pair.a);
		}
	}

}
//Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
//The first ten pentagonal numbers are:
//
//1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//
//It can be seen that P4 + P7 = 22 + 70 = 92 = P8. 
//However, their difference, 70 − 22 = 48, is not pentagonal.
//
//Find the pair of pentagonal numbers, Pj and Pk, 
//for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; 
//what is the value of D?