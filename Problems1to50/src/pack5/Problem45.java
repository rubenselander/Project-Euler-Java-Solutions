package pack5;

import java.util.function.*;

import pack5.Problem44.Pair;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.HashSet;
import java.util.Set;
import java.util.Collections;

public class Problem45 {

	private static Function<Integer, Integer> triFunction = n -> n * (n + 1) / 2;
	private static Function<Integer, Integer> pentFunction = n -> n * (3 * n - 1) / 2;
	private static Function<Integer, Integer> hexFunction = n -> n * (2 * n - 1);
	
	private static Function<Long, Long> triFunction2 = n -> n * (n + 1) / 2;
	private static Function<Long, Long> pentFunction2 = n -> (n * (3 * n - 1) / 2);
	private static Function<Long, Long> hexFunction2 = n -> n * (2 * n - 1);

	public static void main(String[] args) {
		ArrayList<Integer> triValues = new ArrayList<>();
		ArrayList<Integer> pentValues = new ArrayList<>();
		ArrayList<Integer> hexValues = new ArrayList<>();
		Map<Integer, Integer> triMap = new HashMap<>();
		Map<Integer, Integer> pentMap = new HashMap<>();
		Map<Integer, Integer> hexMap = new HashMap<>();
		
//		ArrayList<Long> triValues = new ArrayList<>();
//		ArrayList<Long> pentValues = new ArrayList<>();
//		ArrayList<Long> hexValues = new ArrayList<>();
//		Map<Long, Long> triMap = new HashMap<>();
		int limit = 1000000;

		//TriangleNumber: 3976
		//7906276
		
		for(int i = 0; i <= limit; i++) {
			int triValue = triFunction.apply(i);
			int pentValue = pentFunction.apply(i);
			int hexValue = hexFunction.apply(i);
			triValues.add(triValue);
			pentValues.add(pentValue);
			hexValues.add(hexValue);
			
			triMap.put(triValue, i);
			pentMap.put(pentValue, i);
			hexMap.put(hexValue, i);
		}
		
//		for(long i = 0; i <= limit; i++) {
//			Long triValue = triFunction2.apply(i);
//			Long pentValue = pentFunction2.apply(i);
//			Long hexValue = hexFunction2.apply(i);
//			triValues.add(triValue);
//			pentValues.add(pentValue);
//			hexValues.add(hexValue);
//			
//			triMap.put(triValue, i);
//		}

		
		List<Integer> result = findCommon(triValues, pentValues, hexValues);
		Collections.sort(result);
		for (int i = 0; i < result.size(); i++) {
			
			System.out.println();
			System.out.println("T-" + triMap.get(result.get(i)));
			System.out.println("P-" + pentMap.get(result.get(i)));
			System.out.println("H-" + hexMap.get(result.get(i)));
			System.out.println(result.get(i));
			
		}

	}
	
	public static List<Integer> findCommon(List<Integer> list1, List<Integer> list2, List<Integer> list3) {
		Set<Integer> numbers2 = new HashSet<>(list2);
		Set<Integer> numbers3 = new HashSet<>(list3);
		List<Integer> result = new ArrayList<>();

		for (int i = 0; i < list1.size(); i++) {
			int nbr = list1.get(i);
			if (numbers2.contains(nbr) && numbers3.contains(nbr)) {
				result.add(nbr);
			}
		}
		return result;
	}
	
	public static List<Long> findCommon2(List<Long> list1, List<Long> list2, List<Long> list3) {
		Set<Long> numbers2 = new HashSet<>(list2);
		Set<Long> numbers3 = new HashSet<>(list2);
		List<Long> result = new ArrayList<>();

		for (int i = 0; i < list1.size(); i++) {
			long nbr = list1.get(i);
			if (numbers2.contains(nbr) && numbers3.contains(nbr)) {
				result.add(nbr);
			}
		}
		return result;
	}

	

}

//Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
//triFunction = n * (n + 1) / 2;
//pentFunction = n * (3 * n - 1) / 2;
//hexFunction = n * (2 * n - 1);


//Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
//Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
//Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...

//It can be verified that T285 = P165 = H143 = 40755.
//
//Find the next triangle number that is also pentagonal and hexagonal.