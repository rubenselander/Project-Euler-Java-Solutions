package p51to60;

import java.math.BigInteger;
import java.util.HashMap;
import java.util.ArrayList;

public class Problem57v3 {
    private static HashMap<Integer, BigInteger[]> rootMap = new HashMap<>();

    public static void main(String[] args) {
    	 ArrayList<Integer> sequenceIndex = new ArrayList<>();
    	int limit = 1000;
         int count = 0;
         
         for(int i = 0; i<= limit; i++) {
         	BigInteger[] fraction = nthValueOfSequence(i);
         	int nLength = fraction[0].toString().length();
         	int dLength = fraction[1].toString().length();
         	
         	if(nLength > dLength) {
         		count++;
         		System.out.println(i + ": " + fraction[0] + " / " + fraction[1]);
         		sequenceIndex.add(i);
         	}
         	
         	
         }
         System.out.println(sequenceIndex.size());
//         for(int nbr: sequenceIndex) {
//        	 System.out.println(nbr);
//         }
        // System.out.println(count);
    }
    //[8, 13, 21, 26, 34, 39, 47, 52, 60, 68, 73, 81, 86, 89, 102, 94, 115, 110, 128, 123, 141, 136, 154, 149, 167, 165, 180, 178, 196, 191]
    //[8, 13, 21, 26, 34, 39, 47, 55, 60, 68, 73, 81, 86, 89, 94, 102, 107, 115, 120, 128, 136, 141, 149, 154, 162, 167, 175, 183, 188, 196]
    public static BigInteger[] nthValueOfSequence(int n) {
        BigInteger[] fraction = iterativeFraction(n);
        fraction[0] = fraction[0].add(fraction[1]); // Add 1 to the fraction
        BigInteger gcd = gcd(fraction[0], fraction[1]);
        fraction[0] = fraction[0].divide(gcd);
        fraction[1] = fraction[1].divide(gcd);
        return fraction;
    }

    private static BigInteger[] iterativeFraction(int n) {
        BigInteger numerator = BigInteger.ONE;
        BigInteger denominator = BigInteger.valueOf(2);

        for (int i = 2; i <= n; i++) {
            BigInteger tempNumerator = numerator;
            numerator = denominator;
            denominator = denominator.multiply(BigInteger.valueOf(2)).add(tempNumerator);
        }

        return new BigInteger[]{numerator, denominator};
    }

    private static BigInteger gcd(BigInteger a, BigInteger b) {
        if (b.equals(BigInteger.ZERO)) {
            return a;
        } else {
            return gcd(b, a.mod(b));
        }
    }
}
//FOR 0 <= N <= 100
//8: 1393 / 985
//13: 114243 / 80782
//21: 131836323 / 93222358
//26: 10812186007 / 7645370045
//34: 12477253282759 / 8822750406821
//39: 1023286908188737 / 723573111879672
//47: 1180872205318713601 / 835002744095575440
//55: 1362725501650887306817 / 963592443113182178088
//60: 111760107268250945908601 / 79026329715516201199301
//68: 128971066941642015967892393 / 91196316011299234022705885
//73: 10577200073262678228000529443 / 7479209897770887057999820682
//81: 12206079718853609176884159165123 / 8631001740904974549490112546258
//86: 1001047369445486500122677053453007 / 707847383223858622658735230185145
//89: 14085805418356991727446091676022499 / 9960168529794442859224531878561050
//94: 1155207796880714346660312607673463359 / 816855266853924917324142465625655521
//15

//For 100 <= N <= 200
//102: 1333108796552974910559500626578123263279 / 942650270102046130733437746596776286089
//107: 109331176324590646915478914992316078387601 / 77308816174220163766296465781233402364740
//115: 126168082737452456903529250028052833559273617 / 89214306872958018434668458072636633146596188
//120: 10347321190867115802255469819363090898432797201 / 7316660981177400006023755031791634132229378601
//128: 11940799687771084222816790191714476900294896923393 / 8443420432013143050795938339643913980856932710785
//136: 13779672492366640326014773625768686979849412616798321 / 9743699861882185903218506820194044942274768118867289
//141: 1130101164176199035753279114227770772825762468183033923 / 799102196615802191486387214775247765048898458760710158
//149: 1304135764168161431882534016166025912200366086490350062499 / 922163242431207071074983301530248435746125497723607601750
//154: 106955034391904628829532926151561471673490288414073593463959 / 75628630100556171438667801831554937319401761914888063484221
//162: 123426017006182806728593424683999798008235734137469123231828679 / 87275373599917999482560755526644279276078854297832438763690789
//167: 10122438366048739045860854232589359916350238648910515500799041601 / 7157644810775939373914200292428409592558069316197734563034354040
//175: 11681285102803288958575700330825642899261472262438718847397079900417 / 8259915909165602549459722095627651180776903364201583167196831254288
//183: 13480192886196629409457312320918559316387822640615632639380729406039617 / 9531935801532294566137145384154017034206953924219310777210580233094312
//188: 1105540184822934890623704237438593919955904055869960963292823559167094393 / 781734961562526330085885018056952918577731967470845088407674942332015685
//196: 1275792415277854917239959519736542273373985925693177067960621946582338263721 / 902121468229335127834026984293808153361360200025621689034700453865747562589
//15
